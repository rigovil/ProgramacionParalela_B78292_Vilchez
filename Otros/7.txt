El algoritmo de Kruskal lo que hace es, primeramente llenar una cola de prioridad con todas las aristas que contenga el grafo, la primera arista que salga es la que tenga el valor mínimo. Luego, se llena un conjunto de árboles, el cual es el bosque, donde al inicio cada vertice representa un árbol distinto. Posteriormente, en un ciclo que se ejecuta tantas veces hasta que el bosque tenga un solo árbol (en caso de que haya un camino entre todos los vértices) o hasta que la cola de prioridad esté vacía, se van sacando aristas de la cola de prioridad, y se verifica que esta arista conecte dos árboles diferentes y que no genere un ciclo, si cumple esas condiciones, entonces ambos bosques se unen en uno solo por medio de esa arista. Al finalizar el ciclo, el conjunto de árboles tendrá un solo árbol, el cual será el árbol de mínimo costo. En términos computacionales, el orden de duración del algoritmo de prim es polinomial grado dos, pues todos los vértices se escogen como pivotes y se compara con todos los demás vértices, en cambio el algoritmo de kruskal tiene un tiempo de duración logarítmico, por lo que en principio tardaría menos. Pero, considerando el espacio disponible, el algoritmo de Kruskal gasta mucho más espacio, por el hecho de tener que guardar las aristas, los bosques, y en general el uso de estructuras auxiliares, si la cantidad de datos (vértices y aristas) es muy grande, el espacio utilizado será mucho mayor en este algoritmo en comparación con el algoritmo de prim.
